{"version":3,"sources":["../../../../src/routes/api/v1/flags.ts"],"names":[],"mappings":"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","file":"flags.js","sourcesContent":["import { Router } from \"express\";\nimport { flags } from \"./db_models/flag\";\nconst router = Router();\n\n// TODO: IMPORTANT Make server and frontent request code PRISTINE. Each and every project you make is going to rely on this sould project.\n\n/** URL Format: /flags?<groupName>=x&filter=y&limit=z */\nrouter.get(\"/\", async (request, response, next) => {\n    response.type(\"application/json\");\n\n    let { groupName, isArchived, limit } = request.query;\n\n    isArchived = (isArchived === \"true\");\n\n    if (!groupName) {\n        next();\n        return;\n    }\n\n    const distinctGroups: string[] = await flags.distinct(\"groupName\");\n    if (!distinctGroups.includes(groupName)) {\n        response.send({ error: { isError: true, message: `Group: \"${groupName}\" does not exist...` } });\n    } else {\n        const result = await flags.find({ groupName, isArchived }).limit(limit);\n        response.send(result);\n    }\n\n    response.end();\n});\n\nrouter.put(\"/:id\", async (request, response) => {\n    await flags.updateOne({ _id: request.params.id },\n        { $set: request.body });\n    response.type(\"application/json\");\n    response.end(\"\");\n});\n\nrouter.put(\"/archive/:id\", async (request, response) => {\n    response.type(\"application/json\");\n    //If going to be archived, then set date, else dont (and remove date)\n    if (request.body.isArchived) {\n        await flags.updateOne({ _id: request.params.id },\n            { $set: { ...request.body, dateArchived: new Date() } });\n    } else {\n        await flags.updateOne({ _id: request.params.id },\n            { $set: request.body, $unset: { dateArchived: \"\" } });\n    }\n\n    response.end(\"\");\n});\n\n\nrouter.delete(\"/:id\", async (request, response) => {\n    response.type(\"application/json\");\n    await flags.deleteOne({ _id: request.params.id });\n    response.end(\"\");\n});\n\nrouter.post(\"/add\", async (request, response) => {\n    response.type(\"application/json\");\n    await flags.insertMany(request.body);\n    response.end(\"\");\n});\n\n\nexport default router;\n"]}